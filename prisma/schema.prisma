generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id             String                 @id @default(uuid())
  nomeFantasia   String
  cnpj           String                 @unique
  contratos      Contrato[]
  representantes ClienteRepresentante[]
  oportunidades  Oportunidade[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @default(now()) @updatedAt
  ativo          Boolean                @default(true)
}

model ClienteRepresentante {
  id             String         @id @default(uuid())
  clienteId      String
  cliente        Cliente        @relation(fields: [clienteId], references: [id])
  nome           String
  email          String
  departamento   String
  cargo          String
  //TBD - endereco Endereco - endereço da empresa ou do representante?
  dataNascimento DateTime
  telefone       String
  ativo          Boolean        @default(true)
  contratos      Contrato[]
  oportunidades  Oportunidade[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
}

model Contrato {
  id              String                 @id @default(uuid())
  clienteId       String
  cliente         Cliente                @relation(fields: [clienteId], references: [id])
  titulo          String
  caracteristica  ContratoCaracteristica @default(MENSALIDADE)
  dataInicio      DateTime
  dataFimPrevista DateTime
  valor           Float
  representanteId String
  representante   ClienteRepresentante   @relation(fields: [representanteId], references: [id])
  ativo           Boolean                @default(true)

  RenovarAutomaticamente Boolean  @default(false)
  //TBD - PeriodoContratual - O que é isso?
  dataPagamento          DateTime @default(now()) //Melhorar nomenclatura?
  numeroParcelas         Int      @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @default(now()) @updatedAt
}

enum ContratoCaracteristica {
  MENSALIDADE
  PROJETO
}

model Oportunidade {
  id                     String                     @id @default(uuid())
  clienteId              String
  cliente                Cliente                    @relation(fields: [clienteId], references: [id])
  representanteId        String
  representante          ClienteRepresentante       @relation(fields: [representanteId], references: [id])
  //TBD - departamento
  propostas              Proposta[]
  titulo                 String
  //TBD - gerenteComercial
  caracteristica         OportunidadeCaracteristica
  //TBD - periodoContratual
  //TBD - valorPrevisto
  areaExecutora          AreaExecutora
  dataFechamentoPrevista DateTime
  etapa                  OportunidadeEtapa          @default(NEGOCIACAO)
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @default(now()) @updatedAt
}

enum OportunidadeEtapa {
  NEGOCIACAO
  FECHADA
  PERDIDA
}

enum OportunidadeCaracteristica {
  MENSALIDADE
  PROJETO
}

enum AreaExecutora {
  INFRAESTRUTURA
  DESENVOLVIMENTO
  BUSINESS_INTELLIGENCE
  ALOCACAO_DE_RECURSOS
  HUNTING_DE_RECURSOS
}

enum TipoProposta {
  PROPOSTA_TECNICA_COMERCIAL
  CONTRATO
  ADITIVO
}

model Proposta {
  id             String       @id @default(uuid())
  tipo           TipoProposta
  versao         String
  dataEnvio      DateTime
  emailEnviado   Boolean //Não entendi o propósito dessa coluna
  comissao       Float
  oportunidadeId String
  oportunidade   Oportunidade @relation(fields: [oportunidadeId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Lead {
  id                    String   @id @default(uuid())
  //TBD- gerenteComercialId
  nomeFantasia          String //Criado temporariamente enquanto não sei o significado da coluna "Empresa"
  nomeRepresentante     String
  telefoneRepresentante String
  emailRepresentante    String
  observacao            String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Usuario {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  perfil    Perfil?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Perfil {
  id        String   @id @default(uuid())
  nome      String
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
