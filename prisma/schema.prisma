generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id             String                 @id @default(uuid())
  nomeFantasia   String
  contratos      Contrato[]
  representantes ClienteRepresentante[]
  oportunidades  Oportunidade[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @default(now()) @updatedAt
}

model ClienteRepresentante {
  id             String         @id @default(uuid())
  clienteId      String
  cliente        Cliente        @relation(fields: [clienteId], references: [id])
  nome           String
  email          String
  departamento   String
  cargo          String
  //TBD - endereco Endereco
  dataNascimento DateTime
  telefone       String
  status         String
  contratos      Contrato[]
  oportunidades  Oportunidade[]
  Lead           Lead[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
}

model Contrato {
  id                     String                 @id @default(uuid())
  clienteId              String
  cliente                Cliente                @relation(fields: [clienteId], references: [id])
  titulo                 String
  caracteristica         ContratoCaracteristica @default(MENSALIDADE)
  dataInicio             DateTime
  dataFimPrevista        DateTime
  valor                  Float
  representanteId        String
  representante          ClienteRepresentante   @relation(fields: [representanteId], references: [id])
  //cnpj - Deverá ficar no contrato ou no cliente??
  status                 String
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @default(now()) @updatedAt
  RenovarAutomaticamente Boolean                @default(false)
  //TBD - PeriodoContratual - O que é isso?
  DataPagamento          DateTime               @default(now()) //Melhorar nomenclatura?
  NumeroParcelas         Int                    @default(0)
  //TBD - AreaExecutora
}

enum ContratoCaracteristica {
  MENSALIDADE
  PROJETO
}

model Oportunidade {
  id              String               @id @default(uuid())
  clienteId       String
  cliente         Cliente              @relation(fields: [clienteId], references: [id])
  representanteId String
  representante   ClienteRepresentante @relation(fields: [representanteId], references: [id])
  //TBD - departamento
  propostas       Proposta[]
  titulo          String
  //TBD - gerenteComercial
  //TBD - caracteristica
  //TBD - dataOportunidade
  //TBD - periodoContratual
  //TBD - valorPrevisto
  //TBD - areaExecutora
  //TBD - dataFechamentoPrevista
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now()) @updatedAt
}

enum TipoProposta {
  PROPOSTA_TECNICA_COMERCIAL
  CONTRATO
  ADITIVO
}

model Proposta {
  id             String       @id @default(uuid())
  tipo           TipoProposta
  versao         String
  dataEnvio      DateTime
  emailEnviado   Boolean //Não entendi o propósito dessa coluna
  comissao       Float
  oportunidadeId String
  oportunidade   Oportunidade @relation(fields: [oportunidadeId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Lead {
  id              String               @id @default(uuid())
  //TBD- gerenteComercialId
  nomeFantasia    String //Criado temporariamente enquanto não sei o significado da coluna "Empresa"
  representanteId String
  representante   ClienteRepresentante @relation(fields: [representanteId], references: [id])
  //TBD - Telefone - telefone do cliente ou do representante?
  //TBD - Email - email do cliente ou do representante?
  //TBD - Empresa - é o mesmo que cliente?
  observacao      String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now()) @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Usuario {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role
  Perfil    Perfil?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Perfil {
  id        String   @id @default(uuid())
  name      String
  user      Usuario  @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
